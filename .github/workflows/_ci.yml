name: Reusable CI/CD Workflow

on:
  workflow_call:
    inputs:
      node-versions:
        description: 'JSON array of Node.js versions to test against'
        required: false
        type: string
        default: '["20.x"]'
      run-lint:
        description: 'Whether to run linting'
        required: false
        type: boolean
        default: true
      run-tests:
        description: 'Whether to run tests'
        required: false
        type: boolean
        default: true
      run-build:
        description: 'Whether to run build'
        required: false
        type: boolean
        default: true
      run-typecheck:
        description: 'Whether to run type checking'
        required: false
        type: boolean
        default: false
      run-security-audit:
        description: 'Whether to run security audit'
        required: false
        type: boolean
        default: false
      run-codeql:
        description: 'Whether to run CodeQL analysis'
        required: false
        type: boolean
        default: false
      run-dependency-review:
        description: 'Whether to run dependency review'
        required: false
        type: boolean
        default: false
      upload-artifacts:
        description: 'Whether to upload build artifacts'
        required: false
        type: boolean
        default: false
      cache-dependency-path:
        description: 'Path to dependency file for caching'
        required: false
        type: string
        default: 'package-lock.json'
      working-directory:
        description: 'Working directory for the workflow'
        required: false
        type: string
        default: '.'
      package-manager:
        description: 'Package manager to use (npm, pnpm, yarn)'
        required: false
        type: string
        default: 'npm'
    secrets:
      NPM_TOKEN:
        description: 'NPM authentication token'
        required: false

jobs:
  setup-and-cache:
    name: Setup & Cache Dependencies
    runs-on: ubuntu-latest
    outputs:
      cache-hit: ${{ steps.cache-deps.outputs.cache-hit }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: pnpm/action-setup@v4
        if: inputs.package-manager == 'pnpm'
        with:
          version: latest

      - name: Setup Node.js (npm/yarn)
        uses: actions/setup-node@v4
        if: inputs.package-manager != 'pnpm'
        with:
          node-version: '20.x'
          cache: ${{ inputs.package-manager }}
          cache-dependency-path: ${{ inputs.cache-dependency-path }}

      - name: Setup Node.js (pnpm)
        uses: actions/setup-node@v4
        if: inputs.package-manager == 'pnpm'
        with:
          node-version: '20.x'
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml

      - name: Cache dependencies
        id: cache-deps
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ runner.os }}-${{ inputs.package-manager }}-${{ hashFiles(inputs.cache-dependency-path) }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.package-manager }}-

      - name: Install dependencies (npm)
        if: inputs.package-manager == 'npm' && steps.cache-deps.outputs.cache-hit != 'true'
        working-directory: ${{ inputs.working-directory }}
        run: npm ci

      - name: Install dependencies (pnpm)
        if: inputs.package-manager == 'pnpm' && steps.cache-deps.outputs.cache-hit != 'true'
        working-directory: ${{ inputs.working-directory }}
        run: pnpm install --frozen-lockfile

      - name: Install dependencies (yarn)
        if: inputs.package-manager == 'yarn' && steps.cache-deps.outputs.cache-hit != 'true'
        working-directory: ${{ inputs.working-directory }}
        run: yarn install --frozen-lockfile

  lint-and-test:
    name: Lint & Test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    needs: setup-and-cache
    if: inputs.run-lint || inputs.run-tests || inputs.run-build
    
    strategy:
      matrix:
        node-version: ${{ fromJSON(inputs.node-versions) }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        if: inputs.package-manager == 'pnpm'
        with:
          version: latest

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: ${{ inputs.package-manager }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ runner.os }}-${{ inputs.package-manager }}-${{ hashFiles(inputs.cache-dependency-path) }}
          restore-keys: |
            ${{ runner.os }}-${{ inputs.package-manager }}-

      - name: Install dependencies (npm)
        if: inputs.package-manager == 'npm'
        working-directory: ${{ inputs.working-directory }}
        run: npm ci

      - name: Install dependencies (pnpm)
        if: inputs.package-manager == 'pnpm'
        working-directory: ${{ inputs.working-directory }}
        run: pnpm install --frozen-lockfile

      - name: Install dependencies (yarn)
        if: inputs.package-manager == 'yarn'
        working-directory: ${{ inputs.working-directory }}
        run: yarn install --frozen-lockfile

      - name: Run linting
        if: inputs.run-lint
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm run lint
          elif [ "${{ inputs.package-manager }}" = "pnpm" ]; then
            pnpm lint
          elif [ "${{ inputs.package-manager }}" = "yarn" ]; then
            yarn lint
          fi

      - name: Run tests
        if: inputs.run-tests
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm run test:run
          elif [ "${{ inputs.package-manager }}" = "pnpm" ]; then
            pnpm test:run
          elif [ "${{ inputs.package-manager }}" = "yarn" ]; then
            yarn test:run
          fi

      - name: Build project
        if: inputs.run-build
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm run build
          elif [ "${{ inputs.package-manager }}" = "pnpm" ]; then
            pnpm build
          elif [ "${{ inputs.package-manager }}" = "yarn" ]; then
            yarn build
          fi

      - name: Upload build artifacts
        if: inputs.upload-artifacts && matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.run_id }}
          path: ${{ inputs.working-directory }}/dist/
          retention-days: 7

  type-check:
    name: Type Check
    runs-on: ubuntu-latest
    needs: setup-and-cache
    if: inputs.run-typecheck
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        if: inputs.package-manager == 'pnpm'
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: ${{ inputs.package-manager }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ runner.os }}-${{ inputs.package-manager }}-${{ hashFiles(inputs.cache-dependency-path) }}

      - name: Install dependencies (npm)
        if: inputs.package-manager == 'npm'
        working-directory: ${{ inputs.working-directory }}
        run: npm ci

      - name: Install dependencies (pnpm)
        if: inputs.package-manager == 'pnpm'
        working-directory: ${{ inputs.working-directory }}
        run: pnpm install --frozen-lockfile

      - name: Install dependencies (yarn)
        if: inputs.package-manager == 'yarn'
        working-directory: ${{ inputs.working-directory }}
        run: yarn install --frozen-lockfile

      - name: Run type checking
        working-directory: ${{ inputs.working-directory }}
        run: npx tsc --noEmit

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: setup-and-cache
    if: inputs.run-security-audit
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        if: inputs.package-manager == 'pnpm'
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: ${{ inputs.package-manager }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ runner.os }}-${{ inputs.package-manager }}-${{ hashFiles(inputs.cache-dependency-path) }}

      - name: Install dependencies (npm)
        if: inputs.package-manager == 'npm'
        working-directory: ${{ inputs.working-directory }}
        run: npm ci

      - name: Install dependencies (pnpm)
        if: inputs.package-manager == 'pnpm'
        working-directory: ${{ inputs.working-directory }}
        run: pnpm install --frozen-lockfile

      - name: Install dependencies (yarn)
        if: inputs.package-manager == 'yarn'
        working-directory: ${{ inputs.working-directory }}
        run: yarn install --frozen-lockfile

      - name: Run security audit
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm audit --audit-level=moderate
          elif [ "${{ inputs.package-manager }}" = "pnpm" ]; then
            pnpm audit --audit-level=moderate
          elif [ "${{ inputs.package-manager }}" = "yarn" ]; then
            yarn audit --level=moderate
          fi

      - name: Check for known vulnerabilities
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm audit signatures || true
          fi

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: inputs.run-dependency-review && github.event_name == 'pull_request'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate

  codeql-analysis:
    name: CodeQL Analysis
    runs-on: ubuntu-latest
    if: inputs.run-codeql
    needs: setup-and-cache
    permissions:
      actions: read
      contents: read
      security-events: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        if: inputs.package-manager == 'pnpm'
        with:
          version: latest

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: ${{ inputs.package-manager }}

      - name: Restore dependencies cache
        uses: actions/cache@v4
        with:
          path: |
            node_modules
            ~/.npm
            ~/.pnpm-store
          key: ${{ runner.os }}-${{ inputs.package-manager }}-${{ hashFiles(inputs.cache-dependency-path) }}

      - name: Install dependencies (npm)
        if: inputs.package-manager == 'npm'
        working-directory: ${{ inputs.working-directory }}
        run: npm ci

      - name: Install dependencies (pnpm)
        if: inputs.package-manager == 'pnpm'
        working-directory: ${{ inputs.working-directory }}
        run: pnpm install --frozen-lockfile

      - name: Install dependencies (yarn)
        if: inputs.package-manager == 'yarn'
        working-directory: ${{ inputs.working-directory }}
        run: yarn install --frozen-lockfile

      - name: Build project
        working-directory: ${{ inputs.working-directory }}
        run: |
          if [ "${{ inputs.package-manager }}" = "npm" ]; then
            npm run build
          elif [ "${{ inputs.package-manager }}" = "pnpm" ]; then
            pnpm build
          elif [ "${{ inputs.package-manager }}" = "yarn" ]; then
            yarn build
          fi
        
      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
