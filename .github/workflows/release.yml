name: Release Management

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version increment type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease
      prerelease_tag:
        description: 'Prerelease tag (only for prerelease)'
        required: false
        default: 'beta'
        type: string
      custom_version:
        description: 'Custom version (overrides version_type)'
        required: false
        type: string

jobs:
  pre-release-validation:
    name: Pre-release Validation
    uses: ./.github/workflows/_ci.yml
    with:
      node-versions: '["20.x"]'
      run-lint: true
      run-tests: true
      run-build: true
      run-typecheck: false
      run-security-audit: false
      package-manager: 'npm'

  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: pre-release-validation
    
    permissions:
      contents: write
      pull-requests: write
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Determine new version
        id: version
        run: |
          if [ -n "${{ github.event.inputs.custom_version }}" ]; then
            NEW_VERSION="${{ github.event.inputs.custom_version }}"
            echo "Using custom version: $NEW_VERSION"
          else
            # Calculate new version using Node.js and semver logic
            NEW_VERSION=$(node -e "
              const fs = require('fs');
              const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8'));
              const current = pkg.version.split('.').map(Number);
              const [major, minor, patch] = current;
              
              let newVersion;
              const versionType = '${{ github.event.inputs.version_type }}';
              const prereleaseTag = '${{ github.event.inputs.prerelease_tag }}';
              
              switch(versionType) {
                case 'patch':
                  newVersion = \`\${major}.\${minor}.\${patch + 1}\`;
                  break;
                case 'minor':
                  newVersion = \`\${major}.\${minor + 1}.0\`;
                  break;
                case 'major':
                  newVersion = \`\${major + 1}.0.0\`;
                  break;
                case 'prerelease':
                  // Check if current version is already a prerelease
                  if (pkg.version.includes('-')) {
                    const [base, prereleasePart] = pkg.version.split('-');
                    const prereleaseNumber = prereleasePart.match(/\\d+$/)?.[0] || '0';
                    const nextNumber = parseInt(prereleaseNumber) + 1;
                    newVersion = \`\${base}-\${prereleaseTag}.\${nextNumber}\`;
                  } else {
                    newVersion = \`\${major}.\${minor}.\${patch + 1}-\${prereleaseTag}.0\`;
                  }
                  break;
                default:
                  throw new Error('Unknown version type: ' + versionType);
              }
              console.log(newVersion);
            ")
          fi
          
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "New version will be: $NEW_VERSION"
          
      - name: Update package.json version
        run: |
          npm version ${{ steps.version.outputs.NEW_VERSION }} --no-git-tag-version --allow-same-version
          
      - name: Update CHANGELOG.md
        run: |
          TODAY=$(date +%Y-%m-%d)
          NEW_VERSION="${{ steps.version.outputs.NEW_VERSION }}"
          
          # Create new changelog entry
          {
            echo "# Changelog"
            echo ""
            echo "## [$NEW_VERSION] - $TODAY"
            echo ""
            echo "### Added"
            echo "- New features and enhancements"
            echo ""
            echo "### Changed"
            echo "- Improvements and updates"
            echo ""
            echo "### Fixed"
            echo "- Bug fixes and issue resolutions"
            echo ""
            
            # Add existing changelog content if it exists
            if [ -f CHANGELOG.md ]; then
              tail -n +2 CHANGELOG.md
            fi
          } > CHANGELOG.md.new
          
          mv CHANGELOG.md.new CHANGELOG.md
          
      - name: Create release notes
        run: |
          NEW_VERSION="${{ steps.version.outputs.NEW_VERSION }}"
          
          # Extract changelog section for this version
          awk "/## \[$NEW_VERSION\]/,/## \[.*\]/{if(/## \[.*\]/ && !/## \[$NEW_VERSION\]/) exit; print}" CHANGELOG.md | head -n -1 > release-notes.md
          
      - name: Commit version bump
        run: |
          git add package.json package-lock.json CHANGELOG.md
          git commit -m "chore: bump version to ${{ steps.version.outputs.NEW_VERSION }}"
          git push
          
      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.version.outputs.NEW_VERSION }}
          name: Release v${{ steps.version.outputs.NEW_VERSION }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.version_type == 'prerelease' }}
          make_latest: ${{ github.event.inputs.version_type != 'prerelease' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
            
      - name: Create summary
        run: |
          NEW_VERSION="${{ steps.version.outputs.NEW_VERSION }}"
          echo "## üöÄ Release Created Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`v$NEW_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "**Type:** \`${{ github.event.inputs.version_type }}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. ‚úÖ Version bumped in package.json" >> $GITHUB_STEP_SUMMARY
          echo "2. ‚úÖ CHANGELOG.md updated" >> $GITHUB_STEP_SUMMARY
          echo "3. ‚úÖ GitHub release created" >> $GITHUB_STEP_SUMMARY
          echo "4. ‚è≥ NPM publishing starting..." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** https://github.com/${{ github.repository }}/releases/tag/v$NEW_VERSION" >> $GITHUB_STEP_SUMMARY

  publish-to-npm:
    name: Publish to NPM
    needs: create-release
    uses: ./.github/workflows/_ci.yml
    with:
      node-versions: '["20.x"]'
      run-lint: true
      run-tests: true
      run-build: true
      run-typecheck: false
      run-security-audit: false
      package-manager: 'npm'
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  npm-publish-finalize:
    name: Finalize NPM Publication
    runs-on: ubuntu-latest
    needs: [create-release, publish-to-npm]
    
    permissions:
      contents: read
      id-token: write  # Required for npm provenance
      
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          ref: main  # Make sure we get the updated version
        
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Verify NPM token is available
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "‚ùå NPM_TOKEN secret is not set up"
            echo "Please add NPM_TOKEN to repository secrets"
            exit 1
          else
            echo "‚úÖ NPM_TOKEN is configured"
          fi
        
      - name: Check if version already exists on npm
        run: |
          PACKAGE_VERSION=$(node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8')); console.log(pkg.version);")
          PACKAGE_NAME=$(node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8')); console.log(pkg.name);")
          
          echo "üì¶ Package: $PACKAGE_NAME@$PACKAGE_VERSION"
          
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "‚ùå Version $PACKAGE_VERSION already exists on npm"
            echo "Skipping publication as version already exists"
            exit 0
          else
            echo "‚úÖ Version $PACKAGE_VERSION is available for publishing"
          fi
          
      - name: Build project
        run: npm run build
        
      - name: Verify package contents (dry run)
        run: |
          echo "üì¶ Package contents preview:"
          npm pack --dry-run
          
      - name: Publish to NPM with provenance
        run: |
          echo "üöÄ Publishing package to NPM..."
          npm publish --provenance --access public
          echo "‚úÖ Package published successfully!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Verify publication
        run: |
          PACKAGE_VERSION=$(node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8')); console.log(pkg.version);")
          PACKAGE_NAME=$(node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8')); console.log(pkg.name);")
          
          echo "‚è≥ Waiting for package to be available on npm..."
          sleep 10
          
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version; then
            echo "‚úÖ Package successfully published and available on npm"
          else
            echo "‚ùå Package publication verification failed"
            exit 1
          fi
