name: Publish to NPM

on:
  release:
    types: [published, released, created]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to publish (leave empty to use package.json version)'
        required: false
        type: string
  workflow_call:
    inputs:
      version:
        description: 'Version to publish'
        required: false
        type: string

jobs:
  ci:
    name: Pre-publish Validation
    uses: ./.github/workflows/_ci.yml
    with:
      node-versions: '["20.x"]'
      run-lint: true
      run-tests: true
      run-build: true
      run-typecheck: false
      run-security-audit: true
      package-manager: 'npm'
    secrets:
      NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-package:
    name: Validate & Publish Package
    runs-on: ubuntu-latest
    needs: ci
    
    permissions:
      contents: read
      id-token: write  # Required for npm provenance
      
    steps:
      - name: Debug release info
        run: |
          echo "🔍 Release Information:"
          echo "Release tag: ${{ github.event.release.tag_name }}"
          echo "Release name: ${{ github.event.release.name }}"
          echo "Release action: ${{ github.event.action }}"
          echo "Release published: ${{ github.event.release.published }}"
          echo "Release draft: ${{ github.event.release.draft }}"
          echo "Release prerelease: ${{ github.event.release.prerelease }}"
          echo "Repository: ${{ github.repository }}"
          echo "Event name: ${{ github.event_name }}"
          
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          registry-url: 'https://registry.npmjs.org'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Verify NPM token is available
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "❌ NPM_TOKEN secret is not set up"
            echo "Please add NPM_TOKEN to repository secrets:"
            echo "1. Go to npmjs.com → Profile → Access Tokens"
            echo "2. Generate a new Automation token"
            echo "3. Add it as NPM_TOKEN in GitHub repo secrets"
            exit 1
          else
            echo "✅ NPM_TOKEN is configured"
          fi
          
      - name: Verify package.json version matches release tag
        run: |
          PACKAGE_VERSION=$(node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8')); console.log(pkg.version);")
          
          if [ "${{ github.event_name }}" = "release" ]; then
            RELEASE_TAG="${{ github.event.release.tag_name }}"
            # Remove 'v' prefix if present
            RELEASE_VERSION=${RELEASE_TAG#v}
            
            echo "📦 Package version: $PACKAGE_VERSION"
            echo "🏷️  Release version: $RELEASE_VERSION"
            
            if [ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]; then
              echo "❌ Version mismatch: package.json ($PACKAGE_VERSION) != release tag ($RELEASE_VERSION)"
              echo "Please update package.json version to match the release tag"
              exit 1
            else
              echo "✅ Version match confirmed"
            fi
          elif [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            if [ -n "${{ github.event.inputs.version }}" ]; then
              EXPECTED_VERSION="${{ github.event.inputs.version }}"
              if [ "$PACKAGE_VERSION" != "$EXPECTED_VERSION" ]; then
                echo "❌ Version mismatch: package.json ($PACKAGE_VERSION) != input version ($EXPECTED_VERSION)"
                exit 1
              fi
            fi
            echo "📦 Package version: $PACKAGE_VERSION (manual trigger)"
            echo "✅ Version validation passed"
          fi
          
      - name: Check if version already exists on npm
        run: |
          PACKAGE_VERSION=$(node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8')); console.log(pkg.version);")
          PACKAGE_NAME=$(node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8')); console.log(pkg.name);")
          
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version 2>/dev/null; then
            echo "❌ Version $PACKAGE_VERSION already exists on npm"
            echo "Please increment the version number in package.json"
            exit 1
          else
            echo "✅ Version $PACKAGE_VERSION is available for publishing"
          fi
          
      - name: Build project
        run: npm run build
        
      - name: Verify build output
        run: |
          echo "📁 Build output:"
          ls -la dist/
          
          # Check if all required files exist
          required_files=("chat-widget.es.js" "chat-widget.umd.js" "chat-widget.es.d.ts" "index.css")
          for file in "${required_files[@]}"; do
            if [ ! -f "dist/$file" ]; then
              echo "❌ Required file missing: dist/$file"
              exit 1
            else
              echo "✅ Found: dist/$file"
            fi
          done
          
      - name: Verify package contents (dry run)
        run: |
          echo "📦 Package contents preview:"
          npm pack --dry-run
          
      - name: Publish to NPM with provenance
        run: |
          echo "🚀 Publishing package to NPM..."
          npm publish --provenance --access public
          echo "✅ Package published successfully!"
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Verify publication
        run: |
          PACKAGE_VERSION=$(node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8')); console.log(pkg.version);")
          PACKAGE_NAME=$(node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8')); console.log(pkg.name);")
          
          echo "⏳ Waiting for package to be available on npm..."
          sleep 10
          
          if npm view "$PACKAGE_NAME@$PACKAGE_VERSION" version; then
            echo "✅ Package successfully published and available on npm"
          else
            echo "❌ Package publication verification failed"
            exit 1
          fi
          
      - name: Create success summary
        run: |
          PACKAGE_VERSION=$(node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8')); console.log(pkg.version);")
          PACKAGE_NAME=$(node -e "const fs = require('fs'); const pkg = JSON.parse(fs.readFileSync('./package.json', 'utf8')); console.log(pkg.name);")
          
          echo "## 🎉 Package Published Successfully!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Package:** \`$PACKAGE_NAME@$PACKAGE_VERSION\`" >> $GITHUB_STEP_SUMMARY
          echo "**npm URL:** https://www.npmjs.com/package/$PACKAGE_NAME" >> $GITHUB_STEP_SUMMARY
          echo "**Install command:** \`npm install $PACKAGE_NAME\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Features" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Published with **provenance** for enhanced security" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ All tests passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Security audit passed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Build verification completed" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Version validation confirmed" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Usage" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "npm install $PACKAGE_NAME" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`jsx" >> $GITHUB_STEP_SUMMARY
          echo "import { ChatWidget } from \"$PACKAGE_NAME\";" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "function App() {" >> $GITHUB_STEP_SUMMARY
          echo "  return (" >> $GITHUB_STEP_SUMMARY
          echo "    <ChatWidget" >> $GITHUB_STEP_SUMMARY
          echo "      webhookUrl=\"https://your-api.com/chat\"" >> $GITHUB_STEP_SUMMARY
          echo "      title=\"AI Assistant\"" >> $GITHUB_STEP_SUMMARY
          echo "      color=\"#3b82f6\"" >> $GITHUB_STEP_SUMMARY
          echo "    />" >> $GITHUB_STEP_SUMMARY
          echo "  );" >> $GITHUB_STEP_SUMMARY
          echo "}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
